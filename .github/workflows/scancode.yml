name: ScanCode Toolkit Scan

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Scan type: repo | zip | docker"
        required: true
        default: "repo"
      repo_url:
        description: "Repo URL (if scan_type=repo)"
        default: "https://github.com/example/repo.git"
      archive_file:
        description: "Archive file (if scan_type=zip)"
        default: "sample.zip"
      docker_image:
        description: "Docker image (if scan_type=docker)"
        default: "alpine:latest"

      enable_license_scan:
        type: boolean
        description: "Run license + license-text detection"
        default: true
      enable_copyright_scan:
        type: boolean
        description: "Run copyright + author + email detection"
        default: true
      enable_metadata_scan:
        type: boolean
        description: "Run metadata scans (urls + file info)"
        default: false
      enable_package:
        type: boolean
        description: "Detect packages and manifests"
        default: true
      enable_sbom_export:
        type: boolean
        description: "Export SPDX and CycloneDX SBOM"
        default: false

jobs:
  scancode:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update && \
          sudo apt-get install -y git unzip jq python3 python3-pip && \
          pip3 install pandas openpyxl

      - name: Prepare input
        run: |
          set -euo pipefail
          SCAN_TYPE="${{ github.event.inputs.scan_type }}"
          REPO_URL="${{ github.event.inputs.repo_url }}"
          ARCHIVE_FILE="${{ github.event.inputs.archive_file }}"
          DOCKER_IMAGE="${{ github.event.inputs.docker_image }}"

          case "$SCAN_TYPE" in
            repo)
              git clone "$REPO_URL" input_repo
              INPUT_PATH="input_repo"
              LABEL="$(basename "${REPO_URL%.*}")"
              ;;
            zip)
              unzip -q "$ARCHIVE_FILE" -d input_zip
              INPUT_PATH="input_zip"
              base="$(basename "$ARCHIVE_FILE")"; LABEL="${base%.*}"
              ;;
            docker)
              docker pull "$DOCKER_IMAGE"
              docker save "$DOCKER_IMAGE" -o docker-image.tar
              INPUT_PATH="docker-image.tar"
              LABEL="$(echo "$DOCKER_IMAGE" | tr '/:' '__')"
              ;;
            *)
              echo "❌ Unknown scan_type: $SCAN_TYPE"
              exit 1
              ;;
          esac

          echo "INPUT_PATH=$INPUT_PATH" >> $GITHUB_ENV
          echo "SCAN_LABEL=$LABEL" >> $GITHUB_ENV

      - name: Download ScanCode Toolkit
        run: |
          git clone --depth 1 https://github.com/nexB/scancode-toolkit.git
          cd scancode-toolkit
          ./scancode --version

      - name: Run ScanCode Toolkit
        run: |
          cd scancode-toolkit
          SCANCODE_OPTS=""

          if [ "${{ github.event.inputs.enable_license_scan }}" = "true" ]; then
            SCANCODE_OPTS="$SCANCODE_OPTS --license --license-text"
          fi
          if [ "${{ github.event.inputs.enable_copyright_scan }}" = "true" ]; then
            SCANCODE_OPTS="$SCANCODE_OPTS --copyright --email"
          fi
          if [ "${{ github.event.inputs.enable_metadata_scan }}" = "true" ]; then
            SCANCODE_OPTS="$SCANCODE_OPTS --url --info"
          fi
          if [ "${{ github.event.inputs.enable_package }}" = "true" ]; then
            SCANCODE_OPTS="$SCANCODE_OPTS --package"
          fi

          OUT_PREFIX="$GITHUB_WORKSPACE/scancode_${SCAN_LABEL}"
          IN_PATH="$GITHUB_WORKSPACE/$INPUT_PATH"

          ./scancode $SCANCODE_OPTS --json-pp "${OUT_PREFIX}.json" "$IN_PATH"

          if [ "${{ github.event.inputs.enable_sbom_export }}" = "true" ]; then
            ./scancode --spdx-tv   "${OUT_PREFIX}.spdx.tv"   "$IN_PATH"
            ./scancode --spdx-rdf  "${OUT_PREFIX}.spdx.rdf"  "$IN_PATH"
            ./scancode --cyclonedx-json "${OUT_PREFIX}.cdx.json" "$IN_PATH"
          fi

          echo "OUT_PREFIX=$OUT_PREFIX" >> $GITHUB_ENV

      - name: Convert JSON → Excel
        run: |
          python3 - <<'EOF'
          import os, json, pandas as pd
          ws = os.environ.get("GITHUB_WORKSPACE", ".")
          label = os.environ.get("SCAN_LABEL", "report")
          main_json = f"{ws}/scancode_{label}.json"
          out_xlsx  = f"{ws}/scancode_{label}.xlsx"

          if not os.path.exists(main_json):
              raise SystemExit("⚠️ No main JSON file found.")

          with open(main_json, "r", encoding="utf-8") as f:
              data = json.load(f)

          files_rows, lic_rows, pkg_rows = [], [], []

          if isinstance(data, dict) and "files" in data:
              for fi in data["files"]:
                  if fi.get("type") == "directory": continue
                  lic_keys = [lic.get("spdx_license_key") for lic in fi.get("licenses", []) if lic.get("spdx_license_key")]
                  if fi.get("detected_license_expression_spdx"):
                      lic_keys.append(fi["detected_license_expression_spdx"])
                  files_rows.append({
                      "path": fi.get("path"),
                      "type": fi.get("type"),
                      "licenses": "; ".join(lic_keys),
                      "copyrights": "; ".join([c.get("value") for c in fi.get("copyrights", [])]),
                      "emails": "; ".join([e.get("value") for e in fi.get("emails", [])]),
                      "urls": "; ".join([u.get("value") for u in fi.get("urls", [])]),
                  })
                  for p in fi.get("packages", []):
                      pkg_rows.append({
                          "package_url": p.get("package_url"),
                          "type": p.get("type"),
                          "name": p.get("name"),
                          "version": p.get("version"),
                          "license_expression": p.get("license_expression"),
                      })

          detections = data.get("license_detections") if isinstance(data, dict) else None
          if detections:
              for det in detections:
                  expr = det.get("license_expression_spdx") or det.get("license_expression")
                  for m in det.get("matches", []) + det.get("reference_matches", []):
                      lic_rows.append({
                          "file_path": m.get("from_file") or m.get("file_path"),
                          "license_expression_spdx": expr,
                          "start_line": m.get("start_line"),
                          "end_line": m.get("end_line"),
                          "matcher": m.get("matcher"),
                          "score": m.get("score"),
                          "rule_identifier": m.get("rule_identifier"),
                          "rule_url": m.get("rule_url"),
                          "matched_text": m.get("matched_text"),
                      })

          df_files = pd.DataFrame(files_rows)
          df_lic   = pd.DataFrame(lic_rows)
          df_pkg   = pd.DataFrame(pkg_rows)

          summary_blocks = []
          if not df_lic.empty:
              lic_sum = df_lic.groupby("license_expression_spdx")["file_path"].nunique().reset_index()
              lic_sum.rename(columns={"file_path":"file_count"}, inplace=True)
              lic_sum.insert(0,"Category","License Summary")
              summary_blocks.append(lic_sum)
          if not df_files.empty and "copyrights" in df_files:
              csum = df_files[df_files["copyrights"].astype(bool)][["path","copyrights"]]
              if not csum.empty:
                  csum = csum.copy()
                  csum.insert(0,"Category","Copyrights")
                  summary_blocks.append(csum)
          if not df_pkg.empty:
              pkg_sum = df_pkg[["type","name","version","license_expression"]].copy()
              pkg_sum.insert(0,"Category","Packages")
              summary_blocks.append(pkg_sum)
          df_summary = pd.concat(summary_blocks, ignore_index=True) if summary_blocks else pd.DataFrame()

          with pd.ExcelWriter(out_xlsx) as w:
              if not df_files.empty: df_files.to_excel(w, "Files_Detail", index=False)
              if not df_lic.empty: df_lic.to_excel(w, "Licenses_Detail", index=False)
              if not df_pkg.empty: df_pkg.to_excel(w, "Packages", index=False)
              if not df_summary.empty: df_summary.to_excel(w, "Summary", index=False)

          print(f"✅ Wrote Excel: {out_xlsx}")
          EOF

      - name: Upload ScanCode reports
        uses: actions/upload-artifact@v4
        with:
          name: scancode-reports-${{ env.SCAN_LABEL }}
          path: |
            scancode_${{ env.SCAN_LABEL }}.json
            scancode_${{ env.SCAN_LABEL }}.xlsx
            scancode_${{ env.SCAN_LABEL }}.spdx.tv
            scancode_${{ env.SCAN_LABEL }}.spdx.rdf
            scancode_${{ env.SCAN_LABEL }}.cdx.json
