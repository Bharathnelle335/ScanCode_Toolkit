name: ScanCode Toolkit Scan (Repo / Folder / Zip / Tar / Docker)

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: "What to scan"
        required: true
        type: choice
        options: [repo, folder, zip, tar, docker]
        default: repo

      repo_url:
        description: "Repo URL (for scan_type=repo or folder)"
        required: false
        default: "https://github.com/psf/requests.git"
      git_ref:
        description: "Branch / tag / commit"
        required: false
        default: ""
      folder_path:
        description: "Subfolder inside the repo to scan (only if scan_type=folder)"
        required: false
        default: ""

      archive_url:
        description: "Download URL for .zip/.tar/.tar.gz (for scan_type=zip/tar)"
        required: false
        default: ""
      archive_file:
        description: "Archive file in the repo workspace (for scan_type=zip)"
        required: false
        default: "sample.zip"

      docker_image:
        description: "Docker image (for scan_type=docker)"
        required: false
        default: "alpine:latest"

      enable_license_scan:
        type: boolean
        description: "Run license + license-text detection"
        default: true
      enable_copyright_scan:
        type: boolean
        description: "Run copyright + author + email detection"
        default: true
      enable_metadata_scan:
        type: boolean
        description: "Run metadata scans (urls + file info)"
        default: false
      enable_package:
        type: boolean
        description: "Detect packages and manifests"
        default: true
      enable_sbom_export:
        type: boolean
        description: "Export SPDX and CycloneDX SBOM"
        default: false

jobs:
  scancode:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y git unzip jq tar curl python3 python3-pip
          pip3 install --no-input pandas openpyxl

      - name: Prepare input
        shell: bash
        run: |
          set -euo pipefail

          SCAN_TYPE="${{ github.inputs.scan_type }}"
          REPO_URL_RAW="${{ github.inputs.repo_url }}"
          GIT_REF_RAW="${{ github.inputs.git_ref }}"
          FOLDER_PATH="${{ github.inputs.folder_path }}"
          ARCHIVE_URL="${{ github.inputs.archive_url }}"
          ARCHIVE_FILE="${{ github.inputs.archive_file }}"
          DOCKER_IMAGE="${{ github.inputs.docker_image }}"

          normalize_repo_url() {
            local raw="$1"
            local base_url="" det_ref=""
            case "$raw" in
              https://github.com/*/tree/*)
                det_ref="${raw##*/tree/}"; det_ref="${det_ref%%/*}"
                base_url="${raw%%/tree/*}.git"
                ;;
              https://github.com/*/commit/*)
                det_ref="${raw##*/commit/}"; det_ref="${det_ref%%/*}"
                base_url="${raw%%/commit/*}.git"
                ;;
              https://github.com/*/releases/tag/*)
                det_ref="${raw##*/releases/tag/}"; det_ref="${det_ref%%/*}"
                base_url="${raw%%/releases/tag/*}.git"
                ;;
              https://github.com/*/*)
                base_url="${raw%.git}.git"
                ;;
              *)
                base_url="$raw"
                ;;
            esac
            echo "$base_url|$det_ref"
          }

          strip_ref() {
            local r="$1"
            r="${r#refs/heads/}"; r="${r#refs/tags/}"
            echo "$r"
          }

          # Scan type logic begins here...
