name: ScanCode Toolkit Scan

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Scan type: repo | zip | docker"
        required: true
        default: "repo"
      repo_url:
        description: "Repo URL (if scan_type=repo)"
        default: "https://github.com/example/repo.git"
      archive_file:
        description: "Archive file (if scan_type=zip)"
        default: "sample.zip"
      docker_image:
        description: "Docker image (if scan_type=docker)"
        default: "alpine:latest"

      enable_license_scan:
        type: boolean
        description: "Run license + license-text detection"
        default: true
      enable_copyright_scan:
        type: boolean
        description: "Run copyright + author + email detection"
        default: true
      enable_metadata_scan:
        type: boolean
        description: "Run metadata scans (urls + file info)"
        default: false
      enable_package:
        type: boolean
        description: "Detect packages and manifests"
        default: true
      enable_sbom_export:
        type: boolean
        description: "Export SPDX and CycloneDX SBOM"
        default: false

jobs:
  scancode:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update && \
          sudo apt-get install -y git unzip jq python3 python3-pip && \
          pip3 install pandas openpyxl

      - name: Prepare input
        run: |
          set -euo pipefail
          SCAN_TYPE="${{ github.event.inputs.scan_type }}"
          REPO_URL="${{ github.event.inputs.repo_url }}"
          ARCHIVE_FILE="${{ github.event.inputs.archive_file }}"
          DOCKER_IMAGE="${{ github.event.inputs.docker_image }}"

          case "$SCAN_TYPE" in
            repo)
              echo "📂 Cloning repo..."
              git clone "$REPO_URL" input_repo
              INPUT_PATH="input_repo"
              ;;
            zip)
              echo "🗜️ Unzipping archive..."
              unzip "$ARCHIVE_FILE" -d input_zip
              INPUT_PATH="input_zip"
              ;;
            docker)
              echo "🐳 Saving Docker image..."
              docker pull "$DOCKER_IMAGE"
              docker save "$DOCKER_IMAGE" -o docker-image.tar
              INPUT_PATH="docker-image.tar"
              ;;
            *)
              echo "❌ Unknown scan_type: $SCAN_TYPE"
              exit 1
              ;;
          esac

          echo "INPUT_PATH=$INPUT_PATH" >> $GITHUB_ENV

      - name: Download ScanCode Toolkit
        run: |
          git clone --depth 1 https://github.com/nexB/scancode-toolkit.git
          cd scancode-toolkit
          ./scancode --version

      - name: Run ScanCode Toolkit
        run: |
          cd scancode-toolkit
          SCANCODE_OPTS=""

          if [ "${{ github.event.inputs.enable_license_scan }}" = "true" ]; then
            SCANCODE_OPTS="$SCANCODE_OPTS --license --license-text"
          fi
          if [ "${{ github.event.inputs.enable_copyright_scan }}" = "true" ]; then
            SCANCODE_OPTS="$SCANCODE_OPTS --copyright --email"
          fi
          if [ "${{ github.event.inputs.enable_metadata_scan }}" = "true" ]; then
            SCANCODE_OPTS="$SCANCODE_OPTS --url --info"
          fi
          if [ "${{ github.event.inputs.enable_package }}" = "true" ]; then
            SCANCODE_OPTS="$SCANCODE_OPTS --package"
          fi

          echo "⚡ Running ScanCode with options: $SCANCODE_OPTS"
          ./scancode $SCANCODE_OPTS --json-pp ../scancode_report.json ../$INPUT_PATH

          if [ "${{ github.event.inputs.enable_sbom_export }}" = "true" ]; then
            ./scancode --spdx-json-pp ../scancode_report.spdx.json ../$INPUT_PATH
            ./scancode --cyclonedx-json ../scancode_report.cdx.json ../$INPUT_PATH
          fi


      - name: Convert JSON → CSV + Excel
        run: |
          python3 - <<'EOF'
          import pandas as pd, json, os, glob

          rows = []

          for json_file in glob.glob("*.json"):
              with open(json_file, "r", encoding="utf-8") as f:
                  try:
                      data = json.load(f)
                  except Exception:
                      continue

              # Case 1: license findings (like your sample)
              if isinstance(data, list) and "license_expression" in str(data[0]):
                  for lic in data:
                      for ref in lic.get("reference_matches", []):
                          rows.append({
                              "file_path": ref.get("from_file"),
                              "license_expression": lic.get("license_expression"),
                              "license_expression_spdx": lic.get("license_expression_spdx"),
                              "start_line": ref.get("start_line"),
                              "end_line": ref.get("end_line"),
                              "matcher": ref.get("matcher"),
                              "score": ref.get("score"),
                              "rule_identifier": ref.get("rule_identifier"),
                              "rule_url": ref.get("rule_url"),
                              "matched_text": ref.get("matched_text"),
                          })

              # Case 2: file-by-file scans
              elif isinstance(data, dict) and "files" in data:
                  for f in data["files"]:
                      rows.append({
                          "path": f.get("path"),
                          "type": f.get("type"),
                          "licenses": ", ".join([lic.get("spdx_license_key","") for lic in f.get("licenses", [])]),
                          "copyrights": "; ".join([c.get("value","") for c in f.get("copyrights", [])]),
                          "emails": "; ".join([e.get("value","") for e in f.get("emails", [])]),
                          "urls": "; ".join([u.get("value","") for u in f.get("urls", [])]),
                      })

          if rows:
              df = pd.DataFrame(rows)
              df.to_csv("scancode_report.csv", index=False)
              df.to_excel("scancode_report.xlsx", index=False)
          else:
              print("⚠️ No rows extracted from JSON")
          EOF


      - name: Upload ScanCode reports
        uses: actions/upload-artifact@v4
        with:
          name: scancode-reports
          path: |
            scancode_report.json
            scancode_report.csv
            scancode_report.xlsx
            scancode_report.spdx.json
            scancode_report.cdx.json
