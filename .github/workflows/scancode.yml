name: ScanCode Toolkit Scan

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: "Scan type: repo | zip | docker"
        required: true
        default: "repo"
      repo_url:
        description: "Repo URL (if scan_type=repo)"
        default: "https://github.com/example/repo.git"
      archive_file:
        description: "Archive file (if scan_type=zip)"
        default: "sample.zip"
      docker_image:
        description: "Docker image (if scan_type=docker)"
        default: "alpine:latest"

      enable_license_scan:
        type: boolean
        description: "Run license + license-text detection"
        default: true
      enable_copyright_scan:
        type: boolean
        description: "Run copyright + author + email detection"
        default: true
      enable_metadata_scan:
        type: boolean
        description: "Run metadata scans (urls + file info)"
        default: false
      enable_package:
        type: boolean
        description: "Detect packages and manifests"
        default: true
      enable_sbom_export:
        type: boolean
        description: "Export SPDX and CycloneDX SBOM"
        default: false

jobs:
  scancode:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update && \
          sudo apt-get install -y git unzip jq python3 python3-pip && \
          pip3 install pandas openpyxl

      - name: Prepare input
        run: |
          set -euo pipefail
          SCAN_TYPE="${{ github.event.inputs.scan_type }}"
          REPO_URL="${{ github.event.inputs.repo_url }}"
          ARCHIVE_FILE="${{ github.event.inputs.archive_file }}"
          DOCKER_IMAGE="${{ github.event.inputs.docker_image }}"

          case "$SCAN_TYPE" in
            repo)
              git clone "$REPO_URL" input_repo
              INPUT_PATH="input_repo"
              LABEL="$(basename "${REPO_URL%.*}")"
              ;;
            zip)
              unzip -q "$ARCHIVE_FILE" -d input_zip
              INPUT_PATH="input_zip"
              base="$(basename "$ARCHIVE_FILE")"; LABEL="${base%.*}"
              ;;
            docker)
              docker pull "$DOCKER_IMAGE"
              docker save "$DOCKER_IMAGE" -o docker-image.tar
              INPUT_PATH="docker-image.tar"
              LABEL="$(echo "$DOCKER_IMAGE" | tr '/:' '__')"
              ;;
            *)
              echo "❌ Unknown scan_type: $SCAN_TYPE"
              exit 1
              ;;
          esac

          echo "INPUT_PATH=$INPUT_PATH" >> $GITHUB_ENV
          echo "SCAN_LABEL=$LABEL" >> $GITHUB_ENV

      - name: Download ScanCode Toolkit
        run: |
          git clone --depth 1 https://github.com/nexB/scancode-toolkit.git
          cd scancode-toolkit
          ./scancode --version

      - name: Run ScanCode Toolkit
        run: |
          cd scancode-toolkit
          SCANCODE_OPTS=""

          if [ "${{ github.event.inputs.enable_license_scan }}" = "true" ]; then
            SCANCODE_OPTS="$SCANCODE_OPTS --license --license-text"
          fi
          if [ "${{ github.event.inputs.enable_copyright_scan }}" = "true" ]; then
            SCANCODE_OPTS="$SCANCODE_OPTS --copyright --email"
          fi
          if [ "${{ github.event.inputs.enable_metadata_scan }}" = "true" ]; then
            SCANCODE_OPTS="$SCANCODE_OPTS --url --info"
          fi
          if [ "${{ github.event.inputs.enable_package }}" = "true" ]; then
            SCANCODE_OPTS="$SCANCODE_OPTS --package"
          fi

          OUT_PREFIX="$GITHUB_WORKSPACE/scancode_${SCAN_LABEL}"
          IN_PATH="$GITHUB_WORKSPACE/$INPUT_PATH"

          ./scancode $SCANCODE_OPTS --json-pp "${OUT_PREFIX}.json" "$IN_PATH"

          if [ "${{ github.event.inputs.enable_sbom_export }}" = "true" ]; then
            ./scancode --spdx-tv   "${OUT_PREFIX}.spdx.tv"   "$IN_PATH"
            ./scancode --spdx-rdf  "${OUT_PREFIX}.spdx.rdf"  "$IN_PATH"
            ./scancode --cyclonedx-json "${OUT_PREFIX}.cdx.json" "$IN_PATH"
          fi

          echo "OUT_PREFIX=$OUT_PREFIX" >> $GITHUB_ENV

      - name: Convert JSON → CSV + Excel
        run: |
          python3 - <<'EOF'
          import pandas as pd, json, glob, os

          all_licenses, all_files, all_deps = [], [], []

          for jf in glob.glob("scancode_*.json"):
              with open(jf, "r", encoding="utf-8") as f:
                  try:
                      data = json.load(f)
                  except Exception as e:
                      print(f"⚠️ Failed to load {jf}: {e}")
                      continue

              # --- License detections ---
              for lic in data.get("license_detections", []):
                  for ref in lic.get("reference_matches", []):
                      all_licenses.append({
                          "file_path": ref.get("from_file"),
                          "license_expression": lic.get("license_expression"),
                          "license_expression_spdx": lic.get("license_expression_spdx"),
                          "start_line": ref.get("start_line"),
                          "end_line": ref.get("end_line"),
                          "rule_identifier": ref.get("rule_identifier"),
                          "rule_url": ref.get("rule_url"),
                          "matched_text": ref.get("matched_text"),
                      })

              # --- Dependencies ---
              for dep in data.get("dependencies", []):
                  all_deps.append({
                      "purl": dep.get("purl"),
                      "requirement": dep.get("extracted_requirement"),
                      "scope": dep.get("scope"),
                      "runtime": dep.get("is_runtime"),
                      "optional": dep.get("is_optional"),
                      "pinned": dep.get("is_pinned"),
                      "datafile_path": dep.get("datafile_path"),
                  })

              # --- Files ---
              for fi in data.get("files", []):
                  all_files.append({
                      "path": fi.get("path"),
                      "type": fi.get("type"),
                      "licenses": "; ".join([l.get("spdx_license_key","") for l in fi.get("licenses", []) if l.get("spdx_license_key")]),
                      "copyrights": "; ".join([c.get("value","") for c in fi.get("copyrights", []) if c.get("value")]),
                      "authors": "; ".join([a.get("value","") for a in fi.get("authors", []) if a.get("value")]),
                      "emails": "; ".join([e.get("value","") for e in fi.get("emails", []) if e.get("value")]),
                  })

          # Build DataFrames
          df_lic = pd.DataFrame(all_licenses)
          df_deps = pd.DataFrame(all_deps)
          df_files = pd.DataFrame(all_files)

          # --- Summary ---
          summary_blocks = []
          if not df_lic.empty:
              lic_summary = df_lic.groupby("license_expression_spdx")["file_path"].count().reset_index()
              lic_summary.rename(columns={"file_path": "occurrences"}, inplace=True)
              lic_summary.insert(0, "Category", "Licenses")
              summary_blocks.append(lic_summary)
          if not df_deps.empty:
              dep_summary = df_deps.groupby("scope")["purl"].count().reset_index()
              dep_summary.rename(columns={"purl": "count"}, inplace=True)
              dep_summary.insert(0, "Category", "Dependencies")
              summary_blocks.append(dep_summary)
          df_summary = pd.concat(summary_blocks, ignore_index=True) if summary_blocks else pd.DataFrame()

          # Output file named after SCAN_LABEL
          scan_label = os.getenv("SCAN_LABEL", "scancode")
          out_xlsx = f"scancode_{scan_label}.xlsx"

          with pd.ExcelWriter(out_xlsx) as writer:
              if not df_files.empty:
                  df_files.to_excel(writer, sheet_name="Files_Detail", index=False)
              if not df_lic.empty:
                  df_lic.to_excel(writer, sheet_name="Licenses_Detail", index=False)
              if not df_deps.empty:
                  df_deps.to_excel(writer, sheet_name="Dependencies", index=False)
              if not df_summary.empty:
                  df_summary.to_excel(writer, sheet_name="Summary", index=False)

          print(f"✅ Excel created: {out_xlsx}")
          EOF

      - name: Upload ScanCode reports
        uses: actions/upload-artifact@v4
        with:
          name: scancode-reports-${{ env.SCAN_LABEL }}
          path: |
            scancode_${{ env.SCAN_LABEL }}.json
            scancode_${{ env.SCAN_LABEL }}.xlsx
            scancode_${{ env.SCAN_LABEL }}.spdx.tv
            scancode_${{ env.SCAN_LABEL }}.spdx.rdf
            scancode_${{ env.SCAN_LABEL }}.cdx.json